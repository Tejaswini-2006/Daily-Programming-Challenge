/*Day 23 of 30 

Problem : Sliding Window Maximum
You are given an array of integers arr and a positive integer k. Your task is to find the maximum element in each sliding window of size k. The window slides from left to right, one element at a time, and you need to return the maximum element for each of these windows.

Input :
* An integer array arr of size n, where 1≤n≤105
* An integer k, where 1≤k≤n
* Input: arr = [1, 3, -1, -3, 5, 3, 6, 7], k = 3

Output :
An array of size n−k+1 containing the maximum element from each sliding window.
Output: [3, 3, 5, 5, 6, 7]
*/



#include <stdio.h>
#include <stdlib.h>

// Deque implementation for indices
typedef struct {
    int *data;
    int front, rear, size;
} Deque;

Deque* createDeque(int n) {
    Deque* dq = (Deque*)malloc(sizeof(Deque));
    dq->data = (int*)malloc(n * sizeof(int));
    dq->front = 0;
    dq->rear = -1;
    dq->size = 0;
    return dq;
}

int isEmpty(Deque* dq) {
    return dq->size == 0;
}

void pushBack(Deque* dq, int val) {
    dq->rear++;
    dq->data[dq->rear] = val;
    dq->size++;
}

void popBack(Deque* dq) {
    dq->rear--;
    dq->size--;
}

void popFront(Deque* dq) {
    dq->front++;
    dq->size--;
}

int front(Deque* dq) {
    return dq->data[dq->front];
}

int back(Deque* dq) {
    return dq->data[dq->rear];
}

void slidingWindowMax(int arr[], int n, int k) {
    Deque* dq = createDeque(n);

    for (int i = 0; i < n; i++) {
        // Remove indices out of this window
        if (!isEmpty(dq) && front(dq) <= i - k) {
            popFront(dq);
        }

        // Remove smaller elements from back
        while (!isEmpty(dq) && arr[back(dq)] <= arr[i]) {
            popBack(dq);
        }

        pushBack(dq, i);

        // Print max (front of deque) after first k-1 elements
        if (i >= k - 1) {
            printf("%d ", arr[front(dq)]);
        }
    }
    printf("\n");
}

int main() {
    int arr[] = {1, 3, -1, -3, 5, 3, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;

    printf("Sliding Window Maximums: ");
    slidingWindowMax(arr, n, k);

    return 0;
}
output 
Sliding Window Maximums: 3 3 5 5 6 7

