/*Day 11 of 30

Problem : Permutations of a String
You are given a string s. Your task is to generate and return all possible permutations of the characters in the string. A permutation is a rearrangement of the characters in the string, and each character must appear exactly once in every permutation. If there are duplicate characters in the string, the resulting permutations should also be unique (i.e., no repeated permutations).

Input :
A string s consisting of lowercase English letters. The length of the string n satisfies 1‚â§ùëõ‚â§9.
Input: "abc"

Output :
An array of strings containing all unique permutations of the input string. The order of permutations in the output does not matter.
Output: ["abc", "acb", "bac", "bca", "cab", "cba"]
*/




#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// Function to swap two characters
void swap(char *x, char *y) {
    char temp = *x;
    *x = *y;
    *y = temp;
}

// Function to check if the current character has already appeared
// at the current recursion depth (to avoid duplicates)
bool shouldSwap(char str[], int start, int curr) {
    for (int i = start; i < curr; i++) {
        if (str[i] == str[curr]) {
            return false;
        }
    }
    return true;
}

// Recursive function to generate permutations
void permute(char str[], int l, int r) {
    if (l == r) {
        printf("%s\n", str);
        return;
    }

    for (int i = l; i <= r; i++) {
        if (shouldSwap(str, l, i)) {  // Avoid duplicate swaps
            swap(&str[l], &str[i]);
            permute(str, l + 1, r);
            swap(&str[l], &str[i]);  // Backtrack
        }
    }
}

int main() {
    char str[20];
    printf("Enter a string: ");
    scanf("%s", str);

    int n = strlen(str);
    printf("Unique permutations:\n");
    permute(str, 0, n - 1);

    return 0;
}
OUTPUT 

abc
acb
bac
bca
cab
cba


