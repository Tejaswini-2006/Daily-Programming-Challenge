/*Day 19 of 30 

Problem : Evaluate a Postfix Expression
Given a postfix expression (also known as Reverse Polish Notation), your task is to evaluate the expression and return the result. The expression can contain integers and the four basic arithmetic operators +, -, *, and /. Assume that the input is always valid and the division operator performs integer division, truncating towards zero.

Input :
- A string representing a postfix expression where operands and operators are separated by spaces.
- The string contains only integers (both positive and negative) and the operators +, -, *, and /.
- Input: "2 1 + 3 *"

Output :
An integer representing the result of evaluating the postfix expression.
Output: 9
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 1000

// Stack implementation
typedef struct {
    int data[MAX];
    int top;
} Stack;

void init(Stack *s) {
    s->top = -1;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

int isFull(Stack *s) {
    return s->top == MAX - 1;
}

void push(Stack *s, int value) {
    if (!isFull(s)) {
        s->data[++s->top] = value;
    } else {
        printf("Stack overflow\n");
        exit(1);
    }
}

int pop(Stack *s) {
    if (!isEmpty(s)) {
        return s->data[s->top--];
    } else {
        printf("Stack underflow\n");
        exit(1);
    }
}

// Evaluate postfix expression
int evaluatePostfix(char *expr) {
    Stack s;
    init(&s);

    char *token = strtok(expr, " ");
    while (token != NULL) {
        // If token is an operator
        if (strlen(token) == 1 && strchr("+-*/", token[0])) {
            int b = pop(&s);
            int a = pop(&s);
            int result;
            switch (token[0]) {
                case '+': result = a + b; break;
                case '-': result = a - b; break;
                case '*': result = a * b; break;
                case '/': 
                    if (b == 0) {
                        printf("Division by zero error\n");
                        exit(1);
                    }
                    result = a / b; // integer division
                    break;
            }
            push(&s, result);
        } else {
            // Otherwise it's an operand (can be negative too)
            push(&s, atoi(token));
        }
        token = strtok(NULL, " ");
    }
    return pop(&s);
}

int main() {
    char expr[MAX];

    printf("Enter a postfix expression: ");
    fgets(expr, MAX, stdin);
    expr[strcspn(expr, "\n")] = '\0'; // remove newline

    int result = evaluatePostfix(expr);
    printf("Result: %d\n", result);

    return 0;
}
OUTPUT
Input:  2 1 + 3 *
Output: Result: 9

Input:  5 6 +
Output: Result: 11

Input:  -5 6 -
Output: Result: -11

