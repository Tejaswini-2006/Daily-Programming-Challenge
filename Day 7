/*Day 7 of 30 

Problem : Trapping Rain Water
You are given an array height[] of non-negative integers where each element represents the height of a bar in a histogram-like structure. These bars are placed next to each other, and the width of each bar is 1 unit. When it rains, water gets trapped between the bars if there are taller bars on both the left and right of the shorter bars. The task is to calculate how much water can be trapped between these bars after the rain.

Input :
An integer array height[] where each element represents the height of a bar in the histogram.
Example : 
height[] = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
*/





#include <stdio.h>

// Function to calculate trapped rainwater
int trapWater(int height[], int n) {
    if (n < 3) return 0;  // With less than 3 bars, water cannot be trapped

    int leftMax[n], rightMax[n];
    int water = 0;

    // Step 1: Find maximum height to the left of each bar
    leftMax[0] = height[0];
    for (int i = 1; i < n; i++) {
        leftMax[i] = (height[i] > leftMax[i-1]) ? height[i] : leftMax[i-1];
    }

    // Step 2: Find maximum height to the right of each bar
    rightMax[n-1] = height[n-1];
    for (int i = n-2; i >= 0; i--) {
        rightMax[i] = (height[i] > rightMax[i+1]) ? height[i] : rightMax[i+1];
    }

    // Step 3: Water trapped at each bar = min(leftMax, rightMax) - height[i]
    for (int i = 0; i < n; i++) {
        int minHeight = (leftMax[i] < rightMax[i]) ? leftMax[i] : rightMax[i];
        water += (minHeight - height[i]);
    }

    return water;
}

// Driver code
int main() {
    int height[] = {0,1,0,2,1,0,1,3,2,1,2,1};
    int n = sizeof(height) / sizeof(height[0]);

    int result = trapWater(height, n);
    printf("Total water trapped = %d\n", result);

    return 0;
}

OUTPUT
Total water trapped = 6
