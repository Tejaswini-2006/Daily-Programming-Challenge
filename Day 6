/*Day 6 of 30 

Problem : Find All Subarrays with Zero Sum
You are given an integer array arr of size n. Your task is to find all the subarrays whose elements sum up to zero. A subarray is defined as a contiguous part of the array, and you must return the starting and ending indices of each subarray.

Input :
An integer array arr of size n where n represents the number of elements in the array.
Example : 
Input: [1, 2, -3, 3, -1, 2]

Output :
- Return a list of tuples, where each tuple contains two integers. The starting index (0-based) of the subarray. The ending index (0-based) of the subarray.
- The output should list all subarrays that sum to zero. If no such subarrays are found, return an empty list.
Example
Output: [(0, 2), (1, 3)]
*/

#include <stdio.h>

// Function to print all subarrays with zero sum
void findZeroSumSubarrays(int arr[], int n) {
    int i, j, sum;

    // Loop for starting index
    for (i = 0; i < n; i++) {
        sum = 0;  // Reset sum for each new starting point

        // Loop for ending index
        for (j = i; j < n; j++) {
            sum += arr[j];  // Add elements one by one

            // Check if sum is 0
            if (sum == 0) {
                printf("Subarray found from index %d to %d\n", i, j);
            }
        }
    }
}

int main() {
    int arr[] = {1, 2, -3, 3,4,-4, -1, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("All subarrays with zero sum are:\n");
    findZeroSumSubarrays(arr, n);

    return 0;
}
OUTPUT
All subarrays with zero sum are:
Subarray found from index 0 to 2
Subarray found from index 2 to 3
Subarray found from index 2 to 5
Subarray found from index 4 to 5
