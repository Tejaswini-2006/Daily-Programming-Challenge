/*Day 25 of 30 

Problem : Check if a Binary Tree is a Binary Search Tree (BST)
You are given the root of a binary tree. Your task is to determine whether the tree is a valid Binary Search Tree (BST)

Input :
* A binary tree represented by its root node.
* Input: root = [2, 1, 3]

Output :
Return true if the binary tree is a valid BST, otherwise return false.
Output: true
*/

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Definition for a binary tree node
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Helper function to create a new tree node
struct TreeNode* newNode(int value) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = value;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Recursive function to check if tree is BST
int isValidBSTHelper(struct TreeNode* root, long minVal, long maxVal) {
    if (root == NULL) return 1;

    if (root->val <= minVal || root->val >= maxVal)
        return 0;

    return isValidBSTHelper(root->left, minVal, root->val) &&
           isValidBSTHelper(root->right, root->val, maxVal);
}

// Main function to call
int isValidBST(struct TreeNode* root) {
    return isValidBSTHelper(root, LONG_MIN, LONG_MAX);
}

// Driver code (example usage)
int main() {
    /*
        Example tree:
              2
             / \
            1   3
    */
    struct TreeNode* root = newNode(2);
    root->left = newNode(1);
    root->right = newNode(3);

    if (isValidBST(root))
        printf("true\n");
    else
        printf("false\n");

    /*
        Another example:
              5
             / \
            1   4
               / \
              3   6
        This should return false
    */
    struct TreeNode* root2 = newNode(5);
    root2->left = newNode(1);
    root2->right = newNode(4);
    root2->right->left = newNode(3);
    root2->right->right = newNode(6);

    if (isValidBST(root2))
        printf("true\n");
    else
        printf("false\n");

    return 0;
}
output
true
false

