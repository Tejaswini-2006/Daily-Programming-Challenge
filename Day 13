/*Day 13 of 30 

Problem : Longest Palindromic Substring
You are given a string s. Your task is to find and return the longest palindromic substring within the given string. A palindrome is a string that reads the same forwards and backwards.

Input :
A string s of length n. The length of the string satisfies 1≤n≤1000.
Input: "babad"

Output :
Return the longest substring of s that is a palindrome. If there are multiple solutions, return the first one that occurs.
Output: "bab"
*/



#include <stdio.h>
#include <string.h>

// Function to expand around the center and return palindrome length
int expandAroundCenter(char *s, int left, int right, int n) {
    while (left >= 0 && right < n && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;  // length of palindrome
}

void longestPalindrome(char *s, char *result) {
    int n = strlen(s);
    if (n == 0) {
        result[0] = '\0';
        return;
    }

    int start = 0, maxLen = 1;

    for (int i = 0; i < n; i++) {
        // Odd length palindrome
        int len1 = expandAroundCenter(s, i, i, n);
        // Even length palindrome
        int len2 = expandAroundCenter(s, i, i + 1, n);

        int len = (len1 > len2) ? len1 : len2;

        if (len > maxLen) {
            maxLen = len;
            start = i - (len - 1) / 2;
        }
    }

    // Copy longest palindrome substring to result
    strncpy(result, s + start, maxLen);
    result[maxLen] = '\0';
}

int main() {
    char s[1001];
    char result[1001];

    printf("Enter a string: ");
    scanf("%1000s", s);

    longestPalindrome(s, result);

    printf("Longest Palindromic Substring: %s\n", result);

    return 0;
}
OUTPUT
Input: babad
Output: bab

Input: cbbd
Output: bb

