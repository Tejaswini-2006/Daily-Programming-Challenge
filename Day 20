/*Day 20 of 30 

Problem : Sort a Stack Using Recursion
Given a stack of integers, your task is to write a function that sorts the stack in ascending order. You are not allowed to use any additional data structure like arrays, lists, or another stack. The only operations you are allowed to perform are push, pop, and peek on the stack. The sorting must be performed using recursion only.

You need to recursively sort the stack, ensuring that after the sorting process, the stack remains sorted without using any additional data structures. You can only use the stack's own operations and recursion to solve this problem.

Input :
* A stack containing integers. The stack may have positive, negative, or zero values.
* Input: [3, 1, 4, 2]

Output :
The input stack should be sorted in ascending order (smallest elements on the top and largest at the bottom) after the sorting operation is performed.
Output: [1, 2, 3, 4]
*/


#include <stdio.h>
#include <stdlib.h>

#define MAX 10000  // maximum stack size

// Stack structure
typedef struct {
    int arr[MAX];
    int top;
} Stack;

// Initialize stack
void init(Stack* s) {
    s->top = -1;
}

// Check if stack is empty
int isEmpty(Stack* s) {
    return s->top == -1;
}

// Check if stack is full
int isFull(Stack* s) {
    return s->top == MAX - 1;
}

// Push element
void push(Stack* s, int val) {
    if (isFull(s)) {
        printf("Stack Overflow!\n");
        return;
    }
    s->arr[++(s->top)] = val;
}

// Pop element
int pop(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack Underflow!\n");
        return -1;
    }
    return s->arr[(s->top)--];
}

// Peek element
int peek(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack is Empty!\n");
        return -1;
    }
    return s->arr[s->top];
}

// Function to insert element in sorted order
void sortedInsert(Stack* s, int val) {
    if (isEmpty(s) || val < peek(s)) {
        push(s, val);
        return;
    }
    int temp = pop(s);
    sortedInsert(s, val);
    push(s, temp);
}

// Function to sort stack
void sortStack(Stack* s) {
    if (!isEmpty(s)) {
        int temp = pop(s);
        sortStack(s);
        sortedInsert(s, temp);
    }
}

// Print stack (top to bottom)
void printStack(Stack* s) {
    for (int i = s->top; i >= 0; i--) {
        printf("%d ", s->arr[i]);
    }
    printf("\n");
}

// Driver code
int main() {
    Stack s;
    init(&s);

    // Example input
    push(&s, 3);
    push(&s, 1);
    push(&s, 4);
    push(&s, 2);

    printf("Original Stack: ");
    printStack(&s);

    sortStack(&s);

    printf("Sorted Stack: ");
    printStack(&s);

    return 0;
}
OUTPUT
Original Stack: 2 4 1 3
Sorted Stack: 4 3 2 1

