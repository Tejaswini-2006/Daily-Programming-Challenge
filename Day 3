//Day 3
/*Problem : Find the Duplicate Number
You are given an array arr containing n+1 integers, where each integer is in the range [1, n] inclusive. There is exactly one duplicate number in the array, but it may appear more than once. Your task is to find the duplicate number without modifying the array and using constant extra space.

Input :
An integer array arr of size n+1, where each element is an integer in the range [1, n].
Example : arr = [3, 1, 3, 4, 2]

Output :
Return the duplicate integer present in the array.
Example: Duplicate number: 3
*/


#include <stdio.h>

int findDuplicate(int arr[], int n) {
    int slow = arr[0];
    int fast = arr[0];

    // Step 1: Detect cycle using slow and fast pointers
    do {
        slow = arr[slow];        // move one step
        fast = arr[arr[fast]];   // move two steps
    } while (slow != fast);

    // Step 2: Find the entry point of the cycle (duplicate number)
    fast = arr[0];
    while (slow != fast) {
        slow = arr[slow];
        fast = arr[fast];
    }

    return slow;  // or fast, both are same
}

int main() {
    int n;
    printf("Enter size of array (n+1): ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements (between 1 and n):\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int duplicate = findDuplicate(arr, n);
    printf("Duplicate number: %d\n", duplicate);

    return 0;
}
output Enter size of array (n+1): 5
Enter 5 elements (between 1 and n):
1
2
3
4
1
Duplicate number: 1
